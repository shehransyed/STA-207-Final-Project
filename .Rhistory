d1$msfr_med = c(s[[1]]$msfr_med, s[[2]]$msfr_med, s[[3]]$msfr_med, s[[4]]$msfr_med, s[[5]]$msfr_med)
d1$msfr_high = c(s[[1]]$msfr_high, s[[2]]$msfr_high, s[[3]]$msfr_high, s[[4]]$msfr_high, s[[5]]$msfr_high)
ggplot(d1, aes(contrast_right, contrast_left, fill = msfr_high)) +
geom_tile() +
facet_wrap(~session) +
scale_fill_gradient(low="blue4", high="orange")
a = ggplot(d1, aes(x = contrast_left, y = msfr_all, group = session, col = session)) +
stat_summary(fun = mean, geom = "line") + theme_bw()
b = ggplot(d1, aes(x = contrast_left, y = msfr_low, group = session, col = session)) +
stat_summary(fun = mean, geom = "line") + theme_bw()
c = ggplot(d1, aes(x = contrast_left, y = msfr_med, group = session, col = session)) +
stat_summary(fun = mean, geom = "line") + theme_bw()
d = ggplot(d1, aes(x = contrast_left, y = msfr_high, group = session, col = session)) +
stat_summary(fun = mean, geom = "line") + theme_bw()
grid.arrange(a, b, c, d)
a = ggplot(d1, aes(x = contrast_right, y = msfr_all, group = session, col = session)) +
stat_summary(fun = mean, geom = "line") + theme_bw()
b = ggplot(d1, aes(x = contrast_right, y = msfr_low, group = session, col = session)) +
stat_summary(fun = mean, geom = "line") + theme_bw()
c = ggplot(d1, aes(x = contrast_right, y = msfr_med, group = session, col = session)) +
stat_summary(fun = mean, geom = "line") + theme_bw()
d = ggplot(d1, aes(x = contrast_right, y = msfr_high, group = session, col = session)) +
stat_summary(fun = mean, geom = "line") + theme_bw()
grid.arrange(a, b, c, d)
fit3.1 = lmer(msfr_low ~ (1 | session) + contrast_left:contrast_right, d1)
fit3.2 = lmer(msfr_low ~ (1 | session) + contrast_left + contrast_right, d1)
anova(fit3.1, fit3.2)
fit4.1 = lmer(msfr_med ~ contrast_left*contrast_right + (1 | session), d1)
fit4.2 = lmer(msfr_med ~ contrast_left + contrast_right + (1 | session), d1)
anova(fit4.1, fit4.2)
fit5.1 = lmer(msfr_high ~ contrast_left*contrast_right + (1 | session), d1)
fit5.2 = lmer(msfr_high ~ contrast_left + contrast_right + (1 | session), d1)
anova(fit5.1, fit5.2)
# calculate probability of z for all combinations of x and y
d1_prob <- d1 %>%
group_by(session, contrast_right, contrast_left) %>%
summarize(prob = mean(feedback_type == 1))
# create heatmap
ggplot(d1_prob, aes(x = contrast_right, y = contrast_left, fill = prob)) +
geom_tile() +
scale_fill_gradient(low = "blue4", high = "orange") +
facet_wrap(~session)
# create heatmap
ggplot(d1_prob, aes(x = contrast_right, y = contrast_left, fill = prob)) +
geom_tile() +
scale_fill_gradient(low = "blue4", high = "orange")
ggplot(d1, aes(contrast_right, contrast_left, color = feedback_type)) +
geom_point(position = position_jitter(height = 0.2, width = 0.2), alpha = 0.5) +
facet_wrap(~session) +
scale_fill_gradient(low="blue4", high="orange")
d3.train = d1[-(1:100), ]
d3.test = d1[(1:100), ]
fit6.1 = glm(feedback_type ~ contrast_left*contrast_right + msfr_low + msfr_med + msfr_high, data = d3.train, family="binomial")
summary(fit6.1)
fit6.2 = glm(feedback_type ~ contrast_left + contrast_right + msfr_low + msfr_med + msfr_high, data = d3.train, family="binomial")
summary(fit6.2)
lrtest(fit6.1, fit6.2)
predicted_prob = predict(fit6.1, d3.train, type = "response")
result = prediction(predicted_prob, d3.train$feedback_type) %>%
performance(measure = "tpr", x.measure = "fpr")
d3.train.plot = data.frame(x = result@x.values[[1]],
y = result@y.values[[1]],
p = result@alpha.values[[1]])
roc = ggplot(data = d3.train.plot) +
geom_path(aes(x = x, y = y)) +
xlab(result@x.name) +
ylab(result@y.name) +
theme_bw()
dist_vec = d3.train.plot$x^2 + (1 - d3.train.plot$y)^2
opt_pos = which.min(dist_vec)
roc +
geom_point(data = d3.train.plot[opt_pos, ],
aes(x = x, y = y), col = "red") +
annotate("text",
x = d3.train.plot[opt_pos, ]$x + 0.1,
y = d3.train.plot[opt_pos, ]$y,
label = paste("p =", round(d3.train.plot[opt_pos, ]$p, 3)))
predicted_prob = predict(fit6.1, d3.test, type = "response")
prediction = as.integer(predicted_prob > 0.662)
confusion_mat = addmargins(table(d3.test$feedback_type, prediction))
names(dimnames(confusion_mat)) <- c("True Feedback", "Predicted Feedback")
colnames(confusion_mat) <- c("Fail", "Success", "Total")
rownames(confusion_mat) <- c("Fail", "Success", "Total")
confusion_mat
(sens = confusion_mat[2,2] / confusion_mat[2,3])
(spec = confusion_mat[1,1] / confusion_mat[1,3])
(acc = (confusion_mat[1,1] + confusion_mat[2,2]) / confusion_mat[3,3])
sessionInfo()
fit6.1 = glm(feedback_type ~ contrast_left*contrast_right + mfr_all, data = d3.train, family="binomial")
summary(fit6.1)
fit6.2 = glm(feedback_type ~ contrast_left + contrast_right + mfr_all + msfr_med + msfr_high, data = d3.train, family="binomial")
summary(fit6.2)
lrtest(fit6.1, fit6.2)
predicted_prob = predict(fit6.1, d3.train, type = "response")
result = prediction(predicted_prob, d3.train$feedback_type) %>%
performance(measure = "tpr", x.measure = "fpr")
d3.train.plot = data.frame(x = result@x.values[[1]],
y = result@y.values[[1]],
p = result@alpha.values[[1]])
roc = ggplot(data = d3.train.plot) +
geom_path(aes(x = x, y = y)) +
xlab(result@x.name) +
ylab(result@y.name) +
theme_bw()
dist_vec = d3.train.plot$x^2 + (1 - d3.train.plot$y)^2
opt_pos = which.min(dist_vec)
roc +
geom_point(data = d3.train.plot[opt_pos, ],
aes(x = x, y = y), col = "red") +
annotate("text",
x = d3.train.plot[opt_pos, ]$x + 0.1,
y = d3.train.plot[opt_pos, ]$y,
label = paste("p =", round(d3.train.plot[opt_pos, ]$p, 3)))
predicted_prob = predict(fit6.1, d3.test, type = "response")
prediction = as.integer(predicted_prob > 0.673)
confusion_mat = addmargins(table(d3.test$feedback_type, prediction))
names(dimnames(confusion_mat)) <- c("True Feedback", "Predicted Feedback")
colnames(confusion_mat) <- c("Fail", "Success", "Total")
rownames(confusion_mat) <- c("Fail", "Success", "Total")
confusion_mat
(sens = confusion_mat[2,2] / confusion_mat[2,3])
(spec = confusion_mat[1,1] / confusion_mat[1,3])
(acc = (confusion_mat[1,1] + confusion_mat[2,2]) / confusion_mat[3,3])
gc()
## Global options
knitr::opts_chunk$set(cache = TRUE)
library(dplyr)
library(knitr)
library(kableExtra)
library(ggplot2)
library(GGally)
library(gridExtra)
library(cowplot)
library(lme4)
library(lmerTest)
library(lmtest)
library(questionr)
library(ROCR)
library(rmdformats)
session=list()
for(i in 1:5){
session[[i]]=readRDS(paste('./Data/session',i,'.rds',sep=''))
}
temp = reshape::melt(session[[1]]$spks[[1]])
names(temp) = c("neuron", "time", "spikes")
ggplot(temp, aes(time, neuron, fill = spikes)) +
geom_tile() +
scale_fill_gradient(low="white", high="blue4") +
theme_linedraw() +
labs(x = "Time Bins", y = "Neurons",title = "Sample Spike Train", subtitle = "Session 1, Trial 1")
count.neurons = numeric(5)
names(count.neurons) = paste("Session", 1:5)
for (ID in 1:5) {
count.neurons[ID] = dim(session[[ID]]$spks[[1]])[1]
}
kbl(t(count.neurons), caption = "Tab 1: Number of Neurons per session") %>%
kable_styling(full_width = F)
s = session
for (ID in 1:5) {
n.neurons = dim(session[[ID]]$spks[[1]])[1]
s[[ID]]$feedback_type = sapply(s[[ID]]$feedback_type, function(x) {replace(x, x==-1, 0)})
s[[ID]]$trial_type = paste0("L", session[[ID]]$contrast_left, "-R", session[[ID]]$contrast_right)
s[[ID]]$fr_neurons = lapply(session[[ID]]$spks, function(x) {rowSums(x)/0.4})
s[[ID]]$mfr_all = sapply(s[[ID]]$fr_neurons, function(x) {sum(x)/n.neurons})
}
d1 = data.frame(NULL)
for (ID in 1:5) {
d1 = rbind(
d1,
data.frame(
session = as.factor(ID),
date = as.factor(s[[ID]]$date_exp),
name = as.factor(s[[ID]]$mouse_name),
contrast_left = as.factor(s[[ID]]$contrast_left),
contrast_right = as.factor(s[[ID]]$contrast_right),
trial_type = as.factor(s[[ID]]$trial_type),
feedback_type = as.factor(s[[ID]]$feedback_type),
mfr_all = s[[ID]]$mfr_all
)
)
}
summary(d1)
kbl(head(d1), caption = "Tab 2: First 6 observations of dataset")
table("Left Contrast" = d1$contrast_left, "Right Contrast" = d1$contrast_right)
d = ggplot(aes(mfr_all),data = d1) +
geom_density(fill="steelblue", alpha=0.8) +
labs(x = "Mean Firing Rate", y = "Density", title = "(a) Density Plot of MFR")
bp_mfr = ggplot(d1, aes(session, mfr_all)) +
geom_boxplot(aes(fill = name)) +
labs(x = "Session", y = "MFR", title = "(b) MFR by Session")
plot_mfr = ggplot(d1, aes(1:nrow(d1), mfr_all)) +
geom_point(aes(color = session), shape = "x", alpha = 0.8) +
labs(x = "Trial Index", y = "MFR", title = "(c) MFR by Trial")
grid.arrange(d, bp_mfr, plot_mfr, layout_matrix = matrix(c(1, 2,
1, 3), ncol = 2, byrow = TRUE))
ggplot(d1, aes(contrast_right, contrast_left, fill = mfr_all)) +
geom_tile() +
facet_wrap(~session) +
scale_fill_gradient(low="blue4", high="orange") +
labs(x = "Right Contrast", y = "Left Contrast", fill = "MFR", title = "MFR by Combination of Contrasts across Sessions")
options(contrasts = c("contr.treatment", "contr.poly"))
fit0.1 = lmer(mfr_all ~ contrast_left*contrast_right + (1 | session), d1)
# summary(fit0.1)
kbl(anova(fit0.1), caption = "Tab 3: ANOVA table for fixed effects")
fit0.2 = lmer(mfr_all ~ contrast_left + contrast_right + (1 | session), d1)
# summary(fit0.2)
# anova(fit0.2)
kbl(anova(fit0.1, fit0.2), caption = "Tab 4: Output of Anova test. Full Model: fit0.1, Reduced Model: fit0.2")
fit0.3 = aov(mfr_all ~ contrast_left*contrast_right, d1)
# summary(fit0.3)
kbl(anova(fit0.1, fit0.3), caption = "Tab 5: Output of Anova test. Full Model: fit0.1, Reduced Model: fit0.3")
plot(fit0.1, xlab = "Fitted Values", ylab = "Residuals", main = "Residuals vs. Fitted Values")
qqnorm(resid(fit0.1), main = "Residual QQ Plot")
for (ID in 1:5) {
n.neurons = dim(session[[ID]]$spks[[1]])[1]
s[[ID]]$sfr_neurons = lapply(s[[ID]]$fr_neurons, function(x) {(x - min(x))/max(x)})
s[[ID]]$msfr_all = sapply(s[[ID]]$sfr_neurons, function(x) {sum(x)/n.neurons})
}
d1$msfr_all = c(s[[1]]$msfr_all, s[[2]]$msfr_all, s[[3]]$msfr_all, s[[4]]$msfr_all, s[[5]]$msfr_all)
d = ggplot(aes(msfr_all),data = d1) +
geom_density(fill="steelblue", alpha=0.8) +
labs(x = "Mean Scaled Firing Rate", y = "Density", title = "(a) Density Plot of MSFR")
bp_msfr = ggplot(d1, aes(session, msfr_all)) +
geom_boxplot(aes(fill = name)) +
labs(x = "Session", y = "MSFR", title = "(b) MSFR by Session")
plot_msfr = ggplot(d1, aes(1:nrow(d1), msfr_all)) +
geom_point(aes(color = session), shape = "x", alpha = 0.8) +
labs(x = "Trial Index", y = "MSFR", title = "(c) MSFR by Trial")
grid.arrange(d, bp_msfr, plot_msfr, layout_matrix = matrix(c(1, 2,
1, 3), ncol = 2, byrow = TRUE))
ggplot(d1, aes(contrast_right, contrast_left, fill = msfr_all)) +
geom_tile() +
facet_wrap(~session) +
scale_fill_gradient(low="blue4", high="orange") +
labs(x = "Right Contrast", y = "Left Contrast", fill = "MSFR", title = "MSFR by Combination of Contrasts across Sessions")
fit1 = lmer(msfr_all ~ (1 | session) + contrast_left*contrast_right, d1)
# summary(fit1)
kbl(anova(fit1), caption = "Tab 6: ANOVA table for fixed effects")
fit2 = lmer(msfr_all ~ (1 | session) + contrast_left + contrast_right, d1)
summary(fit2)
anova(fit2)
anova(fit1, fit2)
hist(s[[1]]$sfr_neurons[[44]], col = "steelblue", xlab = " Scaled Firing Rate", main = "Distribution of Scaled Firing Rate of all neurons: Session 1 Trial 44")
N = list()
d2 = numeric()
for (ID in 1:5) {
n.neurons = dim(session[[ID]]$spks[[1]])[1]
n.trials = length(session[[ID]]$spks)
M = numeric()
for (i in 1:n.trials) {
M = cbind(M, s[[ID]]$sfr_neurons[[i]])
}
N[[ID]] = list(trial_type = as.factor(s[[ID]]$trial_type),
M = M)
msfr_neuron_trialType = numeric()
for(i in levels(N[[ID]]$trial_type)) {
c = which(N[[ID]]$trial_type == i)
if(length(c) == 1) {
msfr_neuron_trialType = cbind(msfr_neuron_trialType, M[, c])
} else {
msfr_neuron_trialType = cbind(msfr_neuron_trialType, rowMeans(M[, c]))
}
}
N[[ID]]$msfr_neuron_trialType = msfr_neuron_trialType
d2 = rbind(d2, cbind(ID, 1:n.neurons, msfr_neuron_trialType))
}
d2 = as.data.frame(d2)
names(d2) = c("session", "neuron", levels(d1$trial_type))
d2.1 = d2 %>% select(3:18)
wss = 0
for (i in 1:15) {
km.out = kmeans(d2.1, centers = i, nstart = 20, iter.max = 50)
wss[i] = km.out$tot.withinss
}
plot(1:15, wss, type = "b",
xlab = "Number of Clusters",
ylab = "Within groups sum of squares",
main = "Scree plot")
k = 3
km.neurons = kmeans(d2.1, centers = k, nstart = 20, iter.max = 50)
d2$cluster = km.neurons$cluster
table("Session" = d2$session, "Cluster" = d2$cluster)
for (ID in 1:5) {
n.neurons = dim(session[[ID]]$spks[[1]])[1]
c = d2$neuron[which(d2$session == ID & d2$cluster == 1)]
s[[ID]]$msfr_low = colMeans(N[[ID]]$M[c,])
c = d2$neuron[which(d2$session == ID & d2$cluster == 3)]
s[[ID]]$msfr_med = colMeans(N[[ID]]$M[c,])
c = d2$neuron[which(d2$session == ID & d2$cluster == 2)]
s[[ID]]$msfr_high = colMeans(N[[ID]]$M[c,])
}
d1$msfr_low = c(s[[1]]$msfr_low, s[[2]]$msfr_low, s[[3]]$msfr_low, s[[4]]$msfr_low, s[[5]]$msfr_low)
d1$msfr_med = c(s[[1]]$msfr_med, s[[2]]$msfr_med, s[[3]]$msfr_med, s[[4]]$msfr_med, s[[5]]$msfr_med)
d1$msfr_high = c(s[[1]]$msfr_high, s[[2]]$msfr_high, s[[3]]$msfr_high, s[[4]]$msfr_high, s[[5]]$msfr_high)
kbl(head(d1), caption = "Tab 7: Head of Updated Dataset")
a = ggplot(d1, aes(x = contrast_left, y = msfr_all, group = session, col = session)) +
stat_summary(fun = mean, geom = "line") + theme_bw()
b = ggplot(d1, aes(x = contrast_left, y = msfr_low, group = session, col = session)) +
stat_summary(fun = mean, geom = "line") + theme_bw()
c = ggplot(d1, aes(x = contrast_left, y = msfr_med, group = session, col = session)) +
stat_summary(fun = mean, geom = "line") + theme_bw()
d = ggplot(d1, aes(x = contrast_left, y = msfr_high, group = session, col = session)) +
stat_summary(fun = mean, geom = "line") + theme_bw()
grid.arrange(a, b, c, d)
a = ggplot(d1, aes(x = contrast_right, y = msfr_all, group = session, col = session)) +
stat_summary(fun = mean, geom = "line") + theme_bw()
b = ggplot(d1, aes(x = contrast_right, y = msfr_low, group = session, col = session)) +
stat_summary(fun = mean, geom = "line") + theme_bw()
c = ggplot(d1, aes(x = contrast_right, y = msfr_med, group = session, col = session)) +
stat_summary(fun = mean, geom = "line") + theme_bw()
d = ggplot(d1, aes(x = contrast_right, y = msfr_high, group = session, col = session)) +
stat_summary(fun = mean, geom = "line") + theme_bw()
grid.arrange(a, b, c, d)
fit3.1 = lmer(msfr_low ~ (1 | session) + contrast_left*contrast_right, d1)
fit3.2 = lmer(msfr_low ~ (1 | session) + contrast_left + contrast_right, d1)
anova(fit3.1, fit3.2)
anova(fit3.1)
fit4.1 = lmer(msfr_med ~ contrast_left*contrast_right + (1 | session), d1)
fit4.2 = lmer(msfr_med ~ contrast_left + contrast_right + (1 | session), d1)
anova(fit4.1, fit4.2)
anova(fit4.1)
fit5.1 = lmer(msfr_high ~ contrast_left*contrast_right + (1 | session), d1)
fit5.2 = lmer(msfr_high ~ contrast_left + contrast_right + (1 | session), d1)
anova(fit5.1, fit5.2)
anova(fit5.1)
d1_prob <- d1 %>%
group_by(session, contrast_right, contrast_left) %>%
summarize(prob = mean(feedback_type == 1))
ggplot(d1_prob, aes(x = contrast_right, y = contrast_left, fill = prob)) +
geom_tile() +
scale_fill_gradient(low = "blue4", high = "orange") +
labs(x = "Right Contrast", y = "Left Contrast", fill = "Probability of Success", title = "Probability of Success by Combination of Contrasts")
ggplot(d1_prob, aes(x = contrast_right, y = contrast_left, fill = prob)) +
geom_tile() +
scale_fill_gradient(low = "blue4", high = "orange") +
facet_wrap(~session) +
labs(x = "Right Contrast", y = "Left Contrast", fill = "Probability of Success", title = "Probability of Success by Combination of Contrasts across Sessions")
ggplot(d1, aes(contrast_right, contrast_left, color = feedback_type)) +
geom_point(position = position_jitter(height = 0.2, width = 0.2), alpha = 0.5) +
facet_wrap(~session) +
scale_fill_gradient(low="blue4", high="orange")
d3.train = d1[-(1:100), ]
d3.test = d1[(1:100), ]
fit6.1 = glm(feedback_type ~ session + contrast_left*contrast_right + mfr_all, data = d3.train, family="binomial")
summary(fit6.1)
fit6.2 = glm(feedback_type ~ contrast_left*contrast_right + mfr_all, data = d3.train, family="binomial")
summary(fit6.2)
kbl(lrtest(fit6.1, fit6.2), caption = "Tab 8: Likelihood Ratio Test") %>%
kable_styling(full_width = F)
#Full Model
predicted_prob = predict(fit6.1, d3.train, type = "response")
result = prediction(predicted_prob, d3.train$feedback_type) %>%
performance(measure = "tpr", x.measure = "fpr")
d3.train.plot = data.frame(x = result@x.values[[1]],
y = result@y.values[[1]],
p = result@alpha.values[[1]])
roc = ggplot(data = d3.train.plot) +
geom_path(aes(x = x, y = y)) +
xlab(result@x.name) +
ylab(result@y.name) +
theme_bw()
dist_vec = d3.train.plot$x^2 + (1 - d3.train.plot$y)^2
opt_pos = which.min(dist_vec)
roc1 = roc +
geom_point(data = d3.train.plot[opt_pos, ],
aes(x = x, y = y), col = "red") +
annotate("text",
x = d3.train.plot[opt_pos, ]$x + 0.1,
y = d3.train.plot[opt_pos, ]$y,
label = paste("p =", round(d3.train.plot[opt_pos, ]$p, 3)))
roc1 + labs(title = "ROC Curve of Full model")
#Reduced Model
predicted_prob = predict(fit6.2, d3.train, type = "response")
result = prediction(predicted_prob, d3.train$feedback_type) %>%
performance(measure = "tpr", x.measure = "fpr")
d3.train.plot = data.frame(x = result@x.values[[1]],
y = result@y.values[[1]],
p = result@alpha.values[[1]])
roc = ggplot(data = d3.train.plot) +
geom_path(aes(x = x, y = y)) +
xlab(result@x.name) +
ylab(result@y.name) +
theme_bw()
dist_vec = d3.train.plot$x^2 + (1 - d3.train.plot$y)^2
opt_pos = which.min(dist_vec)
roc2 = roc +
geom_point(data = d3.train.plot[opt_pos, ],
aes(x = x, y = y), col = "red") +
annotate("text",
x = d3.train.plot[opt_pos, ]$x + 0.1,
y = d3.train.plot[opt_pos, ]$y,
label = paste("p =", round(d3.train.plot[opt_pos, ]$p, 3)))
roc2 + labs(title = "ROC Curve of Reduced model")
predicted_prob = predict(fit6.1, d3.test, type = "response")
prediction = as.integer(predicted_prob > 0.624)
confusion_mat1 = addmargins(table(d3.test$feedback_type, prediction))
names(dimnames(confusion_mat1)) <- c("True Feedback", "Predicted Feedback")
colnames(confusion_mat1) <- c("Fail", "Success", "Total")
rownames(confusion_mat1) <- c("Fail", "Success", "Total")
kbl(confusion_mat1, caption = "Tab 9: Confusion Matrix of Full Model") %>%
add_header_above(c(" ", "Predicted Feedback" = 2, " "))
predicted_prob = predict(fit6.2, d3.test, type = "response")
prediction = as.integer(predicted_prob > 0.73)
confusion_mat2 = addmargins(table(d3.test$feedback_type, prediction))
names(dimnames(confusion_mat2)) <- c("True Feedback", "Predicted Feedback")
colnames(confusion_mat2) <- c("Fail", "Success", "Total")
rownames(confusion_mat2) <- c("Fail", "Success", "Total")
kbl(confusion_mat2, caption = "Tab 10: Confusion Matrix of reduced Model") %>%
add_header_above(c(" ", "Predicted Feedback" = 2, " "))
sessionInfo()
## Global options
knitr::opts_chunk$set(cache = TRUE)
library(dplyr)
library(knitr)
library(kableExtra)
library(ggplot2)
library(GGally)
library(gridExtra)
library(cowplot)
library(lme4)
library(lmerTest)
library(lmtest)
library(questionr)
library(ROCR)
library(rmdformats)
## Global options
knitr::opts_chunk$set(cache = TRUE)
library(dplyr)
library(knitr)
library(kableExtra)
library(ggplot2)
library(GGally)
library(gridExtra)
library(cowplot)
library(lme4)
library(lmerTest)
library(lmtest)
library(questionr)
library(ROCR)
library(rmdformats)
session=list()
for(i in 1:5){
session[[i]]=readRDS(paste('./Data/session',i,'.rds',sep=''))
}
temp = reshape::melt(session[[1]]$spks[[1]])
names(temp) = c("neuron", "time", "spikes")
ggplot(temp, aes(time, neuron, fill = spikes)) +
geom_tile() +
scale_fill_gradient(low="white", high="blue4") +
theme_linedraw() +
labs(x = "Time Bins", y = "Neurons",title = "Sample Spike Train", subtitle = "Session 1, Trial 1")
count.neurons = numeric(5)
names(count.neurons) = paste("Session", 1:5)
for (ID in 1:5) {
count.neurons[ID] = dim(session[[ID]]$spks[[1]])[1]
}
kbl(t(count.neurons), caption = "Tab 1: Number of Neurons per session") %>%
kable_styling(full_width = F)
s = session
for (ID in 1:5) {
n.neurons = dim(session[[ID]]$spks[[1]])[1]
s[[ID]]$feedback_type = sapply(s[[ID]]$feedback_type, function(x) {replace(x, x==-1, 0)})
s[[ID]]$trial_type = paste0("L", session[[ID]]$contrast_left, "-R", session[[ID]]$contrast_right)
s[[ID]]$fr_neurons = lapply(session[[ID]]$spks, function(x) {rowSums(x)/0.4})
s[[ID]]$mfr_all = sapply(s[[ID]]$fr_neurons, function(x) {sum(x)/n.neurons})
}
d1 = data.frame(NULL)
for (ID in 1:5) {
d1 = rbind(
d1,
data.frame(
session = as.factor(ID),
date = as.factor(s[[ID]]$date_exp),
name = as.factor(s[[ID]]$mouse_name),
contrast_left = as.factor(s[[ID]]$contrast_left),
contrast_right = as.factor(s[[ID]]$contrast_right),
trial_type = as.factor(s[[ID]]$trial_type),
feedback_type = as.factor(s[[ID]]$feedback_type),
mfr_all = s[[ID]]$mfr_all
)
)
}
summary(d1)
kbl(head(d1), caption = "Tab 2: First 6 observations of dataset")
table("Left Contrast" = d1$contrast_left, "Right Contrast" = d1$contrast_right)
d = ggplot(aes(mfr_all),data = d1) +
geom_density(fill="steelblue", alpha=0.8) +
labs(x = "Mean Firing Rate", y = "Density", title = "(a) Density Plot of MFR")
bp_mfr = ggplot(d1, aes(session, mfr_all)) +
geom_boxplot(aes(fill = name)) +
labs(x = "Session", y = "MFR", title = "(b) MFR by Session")
plot_mfr = ggplot(d1, aes(1:nrow(d1), mfr_all)) +
geom_point(aes(color = session), shape = "x", alpha = 0.8) +
labs(x = "Trial Index", y = "MFR", title = "(c) MFR by Trial")
grid.arrange(d, bp_mfr, plot_mfr, layout_matrix = matrix(c(1, 2,
1, 3), ncol = 2, byrow = TRUE))
ggplot(d1, aes(contrast_right, contrast_left, fill = mfr_all)) +
geom_tile() +
facet_wrap(~session) +
scale_fill_gradient(low="blue4", high="orange") +
labs(x = "Right Contrast", y = "Left Contrast", fill = "MFR", title = "MFR by Combination of Contrasts across Sessions")
options(contrasts = c("contr.treatment", "contr.poly"))
fit0.1 = lmer(mfr_all ~ contrast_left*contrast_right + (1 | session), d1)
count.neurons = numeric(5)
names(count.neurons) = paste("Session", 1:5)
for (ID in 1:5) {
count.neurons[ID] = dim(session[[ID]]$spks[[1]])[1]
}
kbl(t(count.neurons), caption = "Tab 1: Number of Neurons per session") %>%
kable_styling(full_width = F)
options(contrasts = c("contr.treatment", "contr.poly"))
fit0.1 = lmer(mfr_all ~ contrast_left*contrast_right + (1 | session), d1)
